# Generated by Django 4.2.7 on 2025-10-13 19:45

from django.db import migrations
import re


def migrate_existing_data(apps, schema_editor):
    """
    Migrate data from old fields to new fields:
    1. Extract numeric year from insurance_year field
    2. Transfer franchise data from old fields to new structured fields
    3. Calculate payments_per_year based on installment_months
    """
    InsuranceOffer = apps.get_model('summaries', 'InsuranceOffer')
    
    # Process all existing offers
    for offer in InsuranceOffer.objects.all():
        # 1. Extract numeric year from insurance_year field
        # Examples: "1 год" -> 1, "2 год" -> 2, "3 год" -> 3
        year_number = extract_year_number(offer.insurance_year)
        offer.insurance_year_number = year_number
        
        # 2. Transfer franchise data from old fields to new structured fields
        migrate_franchise_data(offer)
        
        # 3. Calculate payments_per_year based on installment_months
        calculate_payments_per_year(offer)
        
        # Save the updated offer
        offer.save()


def extract_year_number(insurance_year_str):
    """
    Extract numeric year from insurance_year string.
    Examples: "1 год" -> 1, "2 год" -> 2, "3 год" -> 3
    """
    if not insurance_year_str:
        return 1
    
    # Try to extract number from string like "1 год", "2 год", etc.
    match = re.search(r'(\d+)', str(insurance_year_str))
    if match:
        return int(match.group(1))
    
    # Default to 1 if no number found
    return 1


def migrate_franchise_data(offer):
    """
    Transfer franchise data from old fields to new structured fields:
    - franchise_amount_variant1 -> franchise_1
    - yearly_premium_with_franchise -> premium_with_franchise_1
    - franchise_amount_variant2 -> franchise_2
    - yearly_premium_without_franchise -> premium_with_franchise_2
    
    If variant fields are not available, use fallback logic.
    """
    # Migrate franchise_1 (first variant, usually 0)
    if offer.franchise_amount_variant1 is not None:
        offer.franchise_1 = offer.franchise_amount_variant1
    elif offer.franchise_amount is not None:
        offer.franchise_1 = offer.franchise_amount
    else:
        offer.franchise_1 = 0  # Default to 0
    
    # Migrate premium_with_franchise_1 (premium with first franchise)
    if offer.yearly_premium_with_franchise is not None:
        offer.premium_with_franchise_1 = offer.yearly_premium_with_franchise
    elif offer.insurance_premium is not None:
        offer.premium_with_franchise_1 = offer.insurance_premium
    
    # Migrate franchise_2 (second variant, usually > 0)
    if offer.franchise_amount_variant2 is not None:
        offer.franchise_2 = offer.franchise_amount_variant2
    # If no variant2, leave franchise_2 as null (optional field)
    
    # Migrate premium_with_franchise_2 (premium with second franchise)
    if offer.yearly_premium_without_franchise is not None:
        offer.premium_with_franchise_2 = offer.yearly_premium_without_franchise
    # If no separate premium for franchise_2, leave as null (optional field)


def calculate_payments_per_year(offer):
    """
    Calculate payments_per_year based on installment_months:
    - If installment not available: 1 payment per year
    - If installment_months = 12: 12 payments per year
    - If installment_months = 6: 2 payments per year
    - If installment_months = 4: 3 payments per year
    - If installment_months = 3: 4 payments per year
    - Default: 1 payment per year
    """
    if not offer.installment_available or not offer.installment_months:
        offer.payments_per_year = 1
        return
    
    # Calculate payments per year based on installment months
    months = offer.installment_months
    
    if months == 12:
        offer.payments_per_year = 12  # Monthly payments
    elif months == 6:
        offer.payments_per_year = 2   # Semi-annual payments
    elif months == 4:
        offer.payments_per_year = 3   # Quarterly payments
    elif months == 3:
        offer.payments_per_year = 4   # Quarterly payments
    elif months == 2:
        offer.payments_per_year = 6   # Bi-monthly payments
    elif months == 1:
        offer.payments_per_year = 12  # Monthly payments
    else:
        # For other values, try to calculate logically
        if months <= 12:
            offer.payments_per_year = max(1, 12 // months)
        else:
            offer.payments_per_year = 1  # Default to annual payment


def reverse_migrate_data(apps, schema_editor):
    """
    Reverse migration - clear the new fields
    """
    InsuranceOffer = apps.get_model('summaries', 'InsuranceOffer')
    
    # Reset new fields to their default values
    InsuranceOffer.objects.all().update(
        insurance_year_number=1,
        franchise_1=0,
        premium_with_franchise_1=None,
        franchise_2=None,
        premium_with_franchise_2=None,
        payments_per_year=1
    )


class Migration(migrations.Migration):

    dependencies = [
        ('summaries', '0003_add_new_offer_fields'),
    ]

    operations = [
        migrations.RunPython(
            migrate_existing_data,
            reverse_migrate_data,
            elidable=True,
        ),
    ]