#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –Ω–∞ Digital Ocean
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/deploy.sh [production|staging]

set -e

ENVIRONMENT=${1:-production}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo "üöÄ Starting deployment to $ENVIRONMENT..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "$PROJECT_DIR/manage.py" ]; then
    echo "‚ùå Error: manage.py not found. Please run this script from the project root."
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
check_health() {
    local url=$1
    local max_attempts=30
    local attempt=1
    
    echo "üîç Checking application health at $url..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f "$url/health/" > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy!"
            return 0
        fi
        
        echo "‚è≥ Attempt $attempt/$max_attempts failed, waiting 10 seconds..."
        sleep 10
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå Health check failed after $max_attempts attempts"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞
rollback() {
    echo "üîÑ Rolling back to previous version..."
    
    if [ "$ENVIRONMENT" = "production" ]; then
        docker-compose -f docker-compose.prod.yml down
        docker tag ghcr.io/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^.]*\).*/\1/'):latest \
                  ghcr.io/$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^.]*\).*/\1/'):$(git rev-parse HEAD)
        docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
    else
        docker-compose -f docker-compose.staging.yml down
        docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d
    fi
    
    if check_health "http://localhost"; then
        echo "‚úÖ Rollback successful!"
    else
        echo "‚ùå Rollback failed! Manual intervention required."
        exit 1
    fi
}

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üíæ Creating database backup..."
if [ "$ENVIRONMENT" = "production" ]; then
    docker-compose -f docker-compose.prod.yml exec -T web python manage.py dumpdata > "backup_prod_$(date +%Y%m%d_%H%M%S).json"
else
    docker-compose -f docker-compose.staging.yml exec -T web python manage.py dumpdata > "backup_staging_$(date +%Y%m%d_%H%M%S).json"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ "$ENVIRONMENT" = "production" ]; then
    if [ ! -f ".env.prod" ]; then
        echo "‚ùå Error: .env.prod file not found"
        echo "Please create .env.prod with production environment variables"
        exit 1
    fi
    ENV_FILE=".env.prod"
    COMPOSE_FILE="docker-compose.prod.yml"
    HEALTH_URL="https://$(grep ALLOWED_HOSTS .env.prod | cut -d'=' -f2 | cut -d',' -f1)"
else
    if [ ! -f ".env.staging" ]; then
        echo "‚ùå Error: .env.staging file not found"
        echo "Please create .env.staging with staging environment variables"
        exit 1
    fi
    ENV_FILE=".env.staging"
    COMPOSE_FILE="docker-compose.staging.yml"
    HEALTH_URL="http://localhost:8001"
fi

# –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
echo "üî® Building Docker image..."
docker build -t insurance-system:latest .

# –¢–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–∑
REPO_NAME=$(git config --get remote.origin.url | sed 's/.*github.com[:/]\([^.]*\).*/\1/')
COMMIT_SHA=$(git rev-parse HEAD)
docker tag insurance-system:latest ghcr.io/$REPO_NAME:$COMMIT_SHA
docker tag insurance-system:latest ghcr.io/$REPO_NAME:latest

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DOCKER_IMAGE –≤ env —Ñ–∞–π–ª–µ
sed -i.bak "s|DOCKER_IMAGE=.*|DOCKER_IMAGE=ghcr.io/$REPO_NAME:$COMMIT_SHA|" $ENV_FILE

# –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
echo "üöÄ Starting new version..."
docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if check_health "$HEALTH_URL"; then
    echo "‚úÖ Deployment successful!"
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
    echo "üßπ Cleaning up old images..."
    docker image prune -f
    
    echo "üéâ Deployment completed successfully!"
    echo "Application is available at: $HEALTH_URL"
else
    echo "‚ùå Deployment failed! Starting rollback..."
    rollback
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üìä Service status:"
docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE ps