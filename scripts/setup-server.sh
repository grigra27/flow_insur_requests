#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ Digital Ocean
# –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–¥ root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

set -e

echo "üöÄ Setting up Digital Ocean server for Insurance System..."

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
echo "üì¶ Updating system packages..."
apt update && apt upgrade -y

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
echo "üì¶ Installing required packages..."
apt install -y \
    curl \
    git \
    nginx \
    ufw \
    fail2ban \
    htop \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
echo "üê≥ Installing Docker..."
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update
apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose
echo "üê≥ Installing Docker Compose..."
curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo "üë§ Creating application user..."
useradd -m -s /bin/bash -G docker deploy
mkdir -p /home/deploy/.ssh
chmod 700 /home/deploy/.ssh

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH –∫–ª—é—á–∏ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á)
echo "üîë Setting up SSH keys..."
echo "# Add your public SSH key here" > /home/deploy/.ssh/authorized_keys
chmod 600 /home/deploy/.ssh/authorized_keys
chown -R deploy:deploy /home/deploy/.ssh

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
echo "üìÅ Creating project directories..."
mkdir -p /opt/insurance-system
mkdir -p /opt/insurance-system-staging
mkdir -p /backups/insurance-system
chown -R deploy:deploy /opt/insurance-system
chown -R deploy:deploy /opt/insurance-system-staging
chown -R deploy:deploy /backups/insurance-system

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º firewall
echo "üî• Configuring firewall..."
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º fail2ban
echo "üõ°Ô∏è  Configuring fail2ban..."
cat > /etc/fail2ban/jail.local << 'EOF'
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
logpath = /var/log/auth.log
maxretry = 3

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log

[nginx-limit-req]
enabled = true
filter = nginx-limit-req
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 10
EOF

systemctl enable fail2ban
systemctl start fail2ban

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥—Ä–æ—Ç–∞—Ü–∏—é
echo "üìã Configuring log rotation..."
cat > /etc/logrotate.d/insurance-system << 'EOF'
/opt/insurance-system/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 deploy deploy
    postrotate
        docker-compose -f /opt/insurance-system/docker-compose.prod.yml restart web celery
    endscript
}
EOF

# –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
echo "‚öôÔ∏è  Creating systemd service..."
cat > /etc/systemd/system/insurance-system.service << 'EOF'
[Unit]
Description=Insurance System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/insurance-system
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml --env-file .env.prod down
TimeoutStartSec=0
User=deploy
Group=deploy

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable insurance-system

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –¥–ª—è –±—ç–∫–∞–ø–æ–≤
echo "‚è∞ Setting up backup cron job..."
cat > /etc/cron.d/insurance-backup << 'EOF'
# Backup insurance system database daily at 2 AM
0 2 * * * deploy cd /opt/insurance-system && docker-compose -f docker-compose.prod.yml exec -T web python manage.py dumpdata > /backups/insurance-system/db_backup_$(date +\%Y\%m\%d_\%H\%M\%S).json

# Clean old backups (older than 30 days)
0 3 * * * deploy find /backups/insurance-system -name "*.json" -mtime +30 -delete
EOF

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo "üìä Creating monitoring script..."
cat > /opt/insurance-system/monitor.sh << 'EOF'
#!/bin/bash

# –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è Insurance System

check_service() {
    local service=$1
    local url=$2
    
    if curl -f "$url" > /dev/null 2>&1; then
        echo "‚úÖ $service is healthy"
        return 0
    else
        echo "‚ùå $service is down"
        return 1
    fi
}

echo "üîç Checking Insurance System health..."
echo "Time: $(date)"
echo "----------------------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
check_service "Main Application" "http://localhost/health/"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üì¶ Docker containers status:"
docker-compose -f /opt/insurance-system/docker-compose.prod.yml ps

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
echo ""
echo "üíæ Disk usage:"
df -h /

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
echo ""
echo "üß† Memory usage:"
free -h

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
echo ""
echo "üìã Recent errors in logs:"
docker-compose -f /opt/insurance-system/docker-compose.prod.yml logs --tail=10 web | grep -i error || echo "No recent errors found"

echo "----------------------------------------"
echo "Monitoring completed at $(date)"
EOF

chmod +x /opt/insurance-system/monitor.sh
chown deploy:deploy /opt/insurance-system/monitor.sh

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ cron
echo "0 */6 * * * deploy /opt/insurance-system/monitor.sh >> /var/log/insurance-monitor.log 2>&1" >> /etc/cron.d/insurance-backup

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Nginx
echo "üåê Creating basic Nginx configuration..."
cat > /etc/nginx/sites-available/insurance-system << 'EOF'
server {
    listen 80;
    server_name _;
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    location /health/ {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF

# –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∞–π—Ç –∏ –≤–∫–ª—é—á–∞–µ–º –Ω–∞—à
rm -f /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/insurance-system /etc/nginx/sites-enabled/
nginx -t
systemctl reload nginx

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
echo "üîí Creating SSL setup script..."
cat > /opt/setup-ssl.sh << 'EOF'
#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
# –ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS –∑–∞–ø–∏—Å–µ–π

DOMAIN=$1

if [ -z "$DOMAIN" ]; then
    echo "Usage: $0 <domain>"
    echo "Example: $0 insurance.example.com"
    exit 1
fi

echo "üîí Setting up SSL for $DOMAIN..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Certbot
apt update
apt install -y certbot python3-certbot-nginx

# –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
certbot --nginx -d $DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
echo "0 12 * * * /usr/bin/certbot renew --quiet" | crontab -

echo "‚úÖ SSL certificate installed for $DOMAIN"
echo "üîÑ Nginx configuration updated automatically"
EOF

chmod +x /opt/setup-ssl.sh

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
echo ""
echo "üéâ Server setup completed!"
echo ""
echo "üìã Next steps:"
echo "1. Add your SSH public key to /home/deploy/.ssh/authorized_keys"
echo "2. Clone your repository to /opt/insurance-system"
echo "3. Create .env.prod file with production settings"
echo "4. Set up DNS records for your domain"
echo "5. Run /opt/setup-ssl.sh <your-domain> to setup SSL"
echo "6. Start the application with systemctl start insurance-system"
echo ""
echo "üìä Useful commands:"
echo "- Monitor system: /opt/insurance-system/monitor.sh"
echo "- View logs: journalctl -u insurance-system -f"
echo "- Check firewall: ufw status"
echo "- Check fail2ban: fail2ban-client status"
echo ""
echo "üîê Security notes:"
echo "- SSH is configured with key-based authentication"
echo "- Firewall is enabled (ports 22, 80, 443 open)"
echo "- Fail2ban is configured for SSH and Nginx protection"
echo "- Regular backups are scheduled at 2 AM daily"
echo ""
echo "‚ö†Ô∏è  Don't forget to:"
echo "- Change default passwords"
echo "- Configure monitoring alerts"
echo "- Set up proper DNS records"
echo "- Set up backup and restore procedures"