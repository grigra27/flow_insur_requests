name: Deploy to Digital Ocean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
  DOCKER_IMAGE_LATEST: ghcr.io/${{ github.repository }}:latest

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary

    - name: Create test environment file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-github-actions
        DEBUG=True
        DB_ENGINE=django.db.backends.postgresql
        DB_NAME=test_db
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_HOST=localhost
        DB_PORT=5432
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Run migrations
      run: |
        python manage.py migrate
        python manage.py setup_user_groups

    - name: Run tests
      run: |
        python manage.py test

    - name: Check deployment readiness
      run: |
        python manage.py check --deploy

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}
          ${{ env.DOCKER_IMAGE_LATEST }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        passphrase: ${{ secrets.DO_PASSPHRASE }}
        port: ${{ secrets.DO_PORT }}
        script: |
          # Переходим в директорию проекта
          cd /opt/insurance-system
          
          # Создаем бэкап текущей версии
          echo "Creating backup..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py dumpdata > backup_$(date +%Y%m%d_%H%M%S).json
          
          # Обновляем код
          echo "Updating code..."
          git pull origin main
          
          # Обновляем переменные окружения
          echo "Updating environment variables..."
          cat > .env.prod << EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          EOF
          
          # Логинимся в GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Загружаем новый образ
          echo "Pulling new image..."
          docker pull ${{ env.DOCKER_IMAGE }}
          
          # Запускаем новую версию
          echo "Starting new version..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
          
          # Ждем запуска
          echo "Waiting for services to start..."
          sleep 30
          
          # Проверяем здоровье приложения
          echo "Checking application health..."
          if curl -f http://localhost/health/ > /dev/null 2>&1; then
            echo "✅ Deployment successful!"
            
            # Очищаем старые образы
            docker image prune -f
            
          else
            echo "❌ Health check failed! Rolling back..."
            
            # Откатываемся к предыдущей версии
            docker-compose -f docker-compose.prod.yml --env-file .env.prod down
            docker tag ${{ env.DOCKER_IMAGE_LATEST }} ${{ env.DOCKER_IMAGE }}
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            
            exit 1
          fi
