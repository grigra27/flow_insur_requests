name: Deploy to Production

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        passphrase: ${{ secrets.DO_PASSPHRASE }}
        port: ${{ secrets.DO_PORT }}
        script: |
          cd /opt/insurance-system
          
          # Обновляем код
          git pull origin main
          
          # Создаем .env файл
          cat > .env << EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          EOF
          
          # Логинимся и загружаем образ
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ env.DOCKER_IMAGE }}
          
          # Перезапускаем сервисы
          docker-compose down
          docker-compose up -d
          
          # Проверяем статус сервисов
          sleep 10
          docker-compose ps
          
          # Очищаем старые образы
          docker image prune -f