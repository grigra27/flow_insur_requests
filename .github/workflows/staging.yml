name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}:staging-${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psycopg2-binary

    - name: Create test environment file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-github-actions
        DEBUG=True
        DB_ENGINE=django.db.backends.postgresql
        DB_NAME=test_db
        DB_USER=postgres
        DB_PASSWORD=postgres
        DB_HOST=localhost
        DB_PORT=5432
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Run migrations
      run: |
        python manage.py migrate
        python manage.py setup_user_groups

    - name: Run tests
      run: |
        python manage.py test

    - name: Run integration tests
      run: |
        python manage.py test tests.test_integration

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          # Переходим в директорию staging
          cd /opt/insurance-system-staging
          
          # Обновляем код
          git pull origin develop
          
          # Обновляем переменные окружения для staging
          cat > .env.staging << EOF
          SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
          DB_NAME=insurance_staging
          DB_USER=insurance_staging
          DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
          ALLOWED_HOSTS=${{ secrets.STAGING_ALLOWED_HOSTS }}
          EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          EOF
          
          # Логинимся в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Загружаем новый образ
          docker pull ${{ env.DOCKER_IMAGE }}
          
          # Запускаем staging версию
          docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d
          
          # Ждем запуска
          sleep 20
          
          # Проверяем здоровье приложения
          if curl -f http://localhost:8001/health/ > /dev/null 2>&1; then
            echo "✅ Staging deployment successful!"
          else
            echo "❌ Staging deployment failed!"
            exit 1
          fi

  run-e2e-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install selenium pytest requests

    - name: Run E2E tests against staging
      run: |
        python -m pytest tests/e2e/ --staging-url=${{ secrets.STAGING_URL }}

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ Staging tests passed! Ready for production deployment.'
          })